<!DOCTYPE html>
<html>

<head>
    <% include partition/header %>
    <style>
        .toolbar {
            position: absolute;
            top: 20px;
            left: 20px;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(248, 250, 252, 0.95));
            backdrop-filter: blur(10px);
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            visibility: hidden;
            min-width: 280px;
            font-family: "Noto Sans TC", sans-serif;
            display: flex;
            flex-direction: column;
            gap: 12px;
        }

        .toolbar>div {
            display: flex;
            align-items: center;
            justify-content: space-between;
            gap: 8px;
            height: 40px;
        }

        .toolbar span {
            font-weight: 500;
            color: #374151;
            min-width: 60px;
            font-size: 14px;
        }

        .toolbar button {
            background: white;
            color: black;
            border: 2px solid #ddd;
            padding: 8px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            font-size: 14px;
            transition: background-color 0.2s ease;
            height: 36px;
        }

        .toolbar button:hover {
            background: #ddd;
        }

        .toolbar button:active {
            background: #ccc;
        }

        .toolbar select,
        .toolbar input[type="number"] {
            background: white;
            border: 2px solid #ddd;
            border-radius: 6px;
            padding: 8px 12px;
            font-size: 14px;
            cursor: pointer;
            transition: border-color 0.2s ease;
            flex: 1;
            min-width: 120px;
        }

        .toolbar select:focus,
        .toolbar input[type="number"]:focus {
            outline: none;
            border-color: #aaa;
        }

        .toolbar select:hover,
        .toolbar input[type="number"]:hover {
            border-color: #aaa;
        }

        .toolbar input[type="checkbox"] {
            width: 18px;
            height: 18px;
            cursor: pointer;
            accent-color: #ddd;
        }

        .Hotspot {
            background-color: #ffffff;
            border-radius: 50%;
            width: 20px;
            height: 20px;
        }

        .HotspotAnnotation {
            background-color: #ffffffdd;
            color: #000;
            padding: 5px;
            font-size: 50px;
            transform: translate(25px, -20px);
            position: absolute;
            border-radius: 5px;
        }

        .progress-bar {
            width: 100%;
            height: 5px;
            background-color: #ccc;
            position: absolute;
        }
    </style>
</head>

<body>
    <script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/4.1.0/model-viewer.min.js"></script>
    <model-viewer id="model-viewer" class="viewer" src="/assets/<%= file %>" 
        ar ar-modes="webxr scene-viewer quick-look"
        camera-controls interaction-prompt="none" max-field-of-view="45deg" disable-tap
        environment-image="/images/white.jpg">
        <div class="toolbar">
            <div>
                <button id="play" style="width: 5em;"></button>
                <button id="downloadDataURL">Download screenshot</button>
                <button id="reset">reset</button>
            </div>
            <div id="animate-div"><span>animate: </span><select id="animate"></select></div>
            <div id="variant-div"><span>variant: </span><select id="variant"></select></div>
            <div id="exposure-div"><span>exposure: </span><input type="number" id="exposure" value="1.0" step="0.1"
                    min="0"></div>
            <div id="background-div"><span>background: </span><input type="checkbox"></div>
        </div>
        <% if(file=='glare.glb' ){ %>
            <div class="Hotspot" slot="hotspot-1" data-surface="0 0 20 22 21 0.095 0.326 0.579"
                data-visibility-attribute="visible">
                <div class="HotspotAnnotation">
                    Head
                </div>
            </div>
            <div class="Hotspot" slot="hotspot-2" data-surface="12 0 22 23 21 0.397 0.397 0.206"
                data-visibility-attribute="visible">
                <div class="HotspotAnnotation">
                    Body
                </div>
            </div>
        <% } %>
    </model-viewer>
    <script>
        const modelViewer = document.getElementById('model-viewer');
        const playButton = document.getElementById('play');
        const variantDiv = document.querySelector('#variant-div');
        const animateDiv = document.querySelector('#animate-div');
        const backgroundDiv = document.querySelector('#background-div');

        modelViewer.addEventListener('load', async () => {
            const variants = modelViewer.availableVariants;
            if (variants.length > 0) {
                for (const name of variants) {
                    const option = document.createElement('option');
                    option.value = name;
                    option.textContent = name;
                    variantDiv.querySelector('select').appendChild(option);
                }
            }
            else {
                variantDiv.style.display = 'none';
            }

            const animations = modelViewer.availableAnimations;
            if (animations.length > 0) {
                for (const name of animations) {
                    const option = document.createElement('option');
                    option.value = name;
                    option.textContent = name;
                    animateDiv.querySelector('select').appendChild(option);
                }
                modelViewer.pause();
                playButton.innerText = 'Play';
                modelViewer.currentTime = 0;
            }
            else {
                animateDiv.style.display = 'none';
                playButton.style.display = 'none';
            }

            backgroundDiv.querySelector('input').checked = modelViewer.skyboxImage ? true : false;
            // modelViewer.exposure = 1.0;
            document.querySelector('#exposure').value = modelViewer.exposure;
            await reset();

            document.querySelector('.toolbar').style.visibility = 'visible';
        });

        playButton.addEventListener('click', () => {
            if (modelViewer.paused) {
                modelViewer.play();
                playButton.innerText = 'Pause';
            }
            else {
                modelViewer.pause();
                playButton.innerText = 'Play';
            }
        });

        variantDiv.querySelector('select').addEventListener('input', (event) => {
            modelViewer.variantName = event.target.value === 'default' ? null : event.target.value;
        });
        animateDiv.querySelector('select').addEventListener('input', (event) => {
            modelViewer.animationName = event.target.value === 'default' ? null : event.target.value;
        });

        document.getElementById('downloadDataURL').addEventListener('click', async () => {
            try {
                const url = modelViewer.toDataURL();

                // Send to server
                const response = await fetch('/save-screenshot', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        imageData: url,
                        filename: `model-${new Date().getTime()}.png`
                    })
                });

                const result = await response.json();

                if (result.success) {
                    alert(`screenshot saved: ${result.filename}`);
                } else {
                    alert('Failed to save screenshot: ' + result.message);
                }

                URL.revokeObjectURL(url);
            } catch (error) {
                console.error('Error saving screenshot:', error);
                alert('Error saving screenshot');
            }
        });
        document.getElementById('reset').addEventListener('click', reset);

        document.getElementById('exposure').addEventListener('input', (event) => {
            modelViewer.exposure = parseFloat(event.target.value);
        });
        backgroundDiv.querySelector('input').addEventListener('change', (event) => {
            if (event.target.checked) {
                modelViewer.skyboxImage = '/images/background.jpg';
            }
            else {
                modelViewer.skyboxImage = '';
            }
        });

        async function reset() {
            await modelViewer.pause();
            await (modelViewer.currentTime = 0);
            playButton.innerText = 'Play';

            await (modelViewer.orientation = "0deg 0deg 0deg");
            await (modelViewer.scale = "1 1 1");
            await modelViewer.updateFraming();
            modelViewer.cameraOrbit = modelViewer.cameraOrbit;
        }
    </script>
</body>

</html>