<!DOCTYPE html>
<html>

<head>
    <% include partition/header %>
    <style>
        .toolbar {
            position: absolute;
            top: 20px;
            left: 20px;
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(248, 250, 252, 0.95));
            backdrop-filter: blur(10px);
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            visibility: hidden;
            min-width: 280px;
            font-family: "Noto Sans TC", sans-serif;
        }

        .toolbar > div {
            margin-bottom: 12px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .toolbar span {
            font-weight: 500;
            color: #374151;
            min-width: 60px;
            font-size: 16px;
        }

        .toolbar button {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            font-size: 14px;
            transition: all 0.2s ease;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
        }

        .toolbar button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 16px rgba(102, 126, 234, 0.4);
        }

        .toolbar button:active {
            transform: translateY(0);
        }

        .toolbar button#play {
            background: linear-gradient(135deg, #10b981, #059669);
            box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
        }

        .toolbar button#play:hover {
            box-shadow: 0 4px 16px rgba(16, 185, 129, 0.4);
        }

        .toolbar button#reset {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            box-shadow: 0 2px 8px rgba(245, 158, 11, 0.3);
        }

        .toolbar button#reset:hover {
            box-shadow: 0 4px 16px rgba(245, 158, 11, 0.4);
        }

        .toolbar select {
            background: white;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            padding: 8px 12px;
            font-size: 14px;
            color: #374151;
            cursor: pointer;
            transition: all 0.2s ease;
            flex: 1;
            min-width: 120px;
        }

        .toolbar select:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .toolbar select:hover {
            border-color: #9ca3af;
        }

        .Hotspot {
            background-color: #ffffff;
            border-radius: 50%;
            width: 20px;
            height: 20px;
        }

        .HotspotAnnotation {
            background-color: #ffffffdd;
            color: #000;
            padding: 5px;
            font-size: 50px;
            transform: translate(25px, -20px);
            position: absolute;
            border-radius: 5px;
        }

        .progress-bar {
            width: 100%;
            height: 5px;
            background-color: #ccc;
            position: absolute;
        }
    </style>
</head>

<body>
    <script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/4.1.0/model-viewer.min.js"></script>
    <model-viewer src="/assets/<%= file %>" ar ar-modes="webxr scene-viewer quick-look" camera-controls interaction-prompt="none" class="viewer" max-field-of-view="45deg" disable-tap id="model-viewer" skybox-image="/images/background.jpg">
        <div class="toolbar">
            <div>
                <button id="play" style="width: 5em;"></button>
                <button id="downloadDataURL">Download screenshot</button>
                <button id="reset">reset</button>
            </div>
            <div><span>animate: </span><select id="animate"></select></div>
            <div><span>variant: </span><select id="variant"></select></div>
            <!-- <button id="downloadBlob">Download blob picture</button> -->
        </div>
        <% if(file == 'glare.glb'){ %>
        <div class="Hotspot" slot="hotspot-1" data-surface="0 0 20 22 21 0.095 0.326 0.579" data-visibility-attribute="visible">
            <div class="HotspotAnnotation">
                Head
            </div>
        </div>
        <div class="Hotspot" slot="hotspot-2" data-surface="12 0 22 23 21 0.397 0.397 0.206" data-visibility-attribute="visible">
            <div class="HotspotAnnotation">
                Body
            </div>
        </div>
        <% } %>
    </model-viewer>
    <script>
        const modelViewer = document.getElementById('model-viewer');
        const playButton = document.getElementById('play');
        const variantSelect = document.querySelector('#variant');
        const animateSelect = document.querySelector('#animate');

        modelViewer.addEventListener('load', () => {
            const animations = modelViewer.availableAnimations;
            const variants = modelViewer.availableVariants;
            console.log('Available animations:', animations);
            console.log('Available variants:', variants);
            if(variants.length > 0) {
                for (const name of variants) {
                    const option = document.createElement('option');
                    option.value = name;
                    option.textContent = name;
                    variantSelect.appendChild(option);
                }
            } 
            else {
                const option = document.createElement('option');
                option.value = 'default';
                option.textContent = 'Default';
                variantSelect.appendChild(option);
            }
            if(animations.length > 0) {
                animateSelect.style.display = 'inline-block';
                for (const name of animations) {
                    const option = document.createElement('option');
                    option.value = name;
                    option.textContent = name;
                    animateSelect.appendChild(option);
                }
            } 
            else {
                const option = document.createElement('option');
                option.value = 'default';
                option.textContent = 'Default';
                animateSelect.appendChild(option);
            }

            if(modelViewer.paused) {
                playButton.innerText = 'Play';
            } 
            else {
                playButton.innerText = 'Pause';
            }
            document.querySelector('.toolbar').style.visibility = 'visible';
        });

        playButton.addEventListener('click', () => {
            if (modelViewer.paused) {
                modelViewer.play();
                playButton.innerText = 'Pause';
            } else {
                modelViewer.pause();
                playButton.innerText = 'Play';
            }
        });

        variantSelect.addEventListener('input', (event) => {
            modelViewer.variantName = event.target.value === 'default' ? null : event.target.value;
        });
        animateSelect.addEventListener('input', (event) => {
            modelViewer.animationName = event.target.value === 'default' ? null : event.target.value;
        });

        document.getElementById('downloadDataURL').addEventListener('click', () => {
            const url = modelViewer.toDataURL();
            const a = document.createElement("a");
            a.href = url;
            a.download = "model.png";
            a.click();
            URL.revokeObjectURL(url);
        });
        document.getElementById('reset').addEventListener('click', async () => {
            await modelViewer.pause();
            playButton.innerText = 'Play';
            await (modelViewer.orientation = "0deg 0deg 0deg");
            await (modelViewer.scale = "1 1 1");
            await modelViewer.updateFraming();
            modelViewer.cameraOrbit = modelViewer.cameraOrbit;
        });
        // document.getElementById('downloadBlob').addEventListener('click', async () => {
        //     const blob = await modelViewer.toBlob({ idealAspect: false });
        //     const url = URL.createObjectURL(blob);
        //     const a = document.createElement("a");
        //     a.href = url;
        //     a.download = "modelViewer_toBlob.png";
        //     a.click();
        //     URL.revokeObjectURL(url);
        // });
        modelViewer.addEventListener('progress', (event) => {
            console.log(event.detail.totalProgress)
        });
    </script>
</body>

</html>