<!DOCTYPE html>
<html>

<head>
    <% include partition/header %>
    <style>
        .toolbar {
            position: absolute;
            top: 10px;
            left: 10px;
            background-color: rgba(255, 255, 255, 0.8);
            padding: 10px;
            border-radius: 5px;
        }
        .Hotspot {
            background-color: #ffffff;
            border-radius: 50%;
            width: 20px;
            height: 20px;
        }
        .HotspotAnnotation {
            background-color: #ffffffdd;
            color: #000;
            padding: 5px;
            font-size: 50px;
            transform: translate(25px, -20px);
            position: absolute;
            border-radius: 5px;
        }
    </style>
</head>

<body>
    <script type="module" src="https://ajax.googleapis.com/ajax/libs/model-viewer/4.1.0/model-viewer.min.js"></script>
    <model-viewer src="/assets/<%= file %>" ar ar-modes="webxr scene-viewer quick-look" camera-controls interaction-prompt="none" class="viewer" max-field-of-view="45deg" disable-tap id="model-viewer">
        
    </model-viewer>
    <script>
        const modelViewer = document.getElementById('model-viewer');
        const playButton = document.getElementById('play');
        const variantSelect = document.querySelector('#variant');
        const animateSelect = document.querySelector('#animate');

        modelViewer.addEventListener('load', () => {
            const animations = modelViewer.availableAnimations;
            const variants = modelViewer.availableVariants;
            console.log('Available animations:', animations);
            console.log('Available variants:', variants);
            if(variants.length > 0) {
                for (const name of variants) {
                    const option = document.createElement('option');
                    option.value = name;
                    option.textContent = name;
                    variantSelect.appendChild(option);
                }
            } 
            else {
                const option = document.createElement('option');
                option.value = 'default';
                option.textContent = 'Default';
                variantSelect.appendChild(option);
            }
            if(animations.length > 0) {
                animateSelect.style.display = 'inline-block';
                for (const name of animations) {
                    const option = document.createElement('option');
                    option.value = name;
                    option.textContent = name;
                    animateSelect.appendChild(option);
                }
            } 
            else {
                const option = document.createElement('option');
                option.value = 'default';
                option.textContent = 'Default';
                animateSelect.appendChild(option);
            }

            if(modelViewer.paused) {
                playButton.innerText = 'Play';
            } 
            else {
                playButton.innerText = 'Pause';
            }
        });

        playButton.addEventListener('click', () => {
            if (modelViewer.paused) {
                modelViewer.play();
                playButton.innerText = 'Pause';
            } else {
                modelViewer.pause();
                playButton.innerText = 'Play';
            }
        });
        variantSelect.addEventListener('input', (event) => {
            modelViewer.variantName = event.target.value === 'default' ? null : event.target.value;
        });
        animateSelect.addEventListener('input', (event) => {
            modelViewer.animationName = event.target.value === 'default' ? null : event.target.value;
        });
    </script>
</body>

</html>